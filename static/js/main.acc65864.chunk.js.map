{"version":3,"sources":["components/Neomorphism.js","components/charts/linechart/index.js","components/charts/barchart/index.js","components/charts/map/choropleth.js","components/dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["Neomarphismui","props","title","className","color","size","data","RenderLineChart","console","log","this","timeseries","total","style","width","height","margin","top","right","bottom","left","stroke","tick","fontSize","dataKey","domain","parseInt","contentStyle","formatter","value","name","payload","date","wrapperStyle","barSize","fill","type","PureComponent","CustomizedAxisTick","x","y","transform","dy","textAnchor","BarChartGraph","states","interval","state","layout","verticalAlign","align","stackId","ChoroplethMap","useState","setStates","setState","statistic","setStatistic","setIndex","choroplethMap","useRef","useEffect","length","current","mapData","maxConfirmed","confirmed","minConfirmed","i","selector","svg","d3","attr","unemployment","projection","center","scale","translate","path","append","delta","Math","floor","cells","Array","from","keys","map","legendLinear","legendColor","shapeWidth","titleWidth","labels","genLength","generatedLabels","labelDelimiter","n","n1","n2","orient","select","call","promises","JSON","parse","stringify","indiaMapJson","Promise","all","then","india","index","set","toLowerCase","selectAll","topojson","objects","features","enter","d","get","properties","ST_NM","on","target","parentNode","appendChild","text","parseFloat","toFixed","toTitleCase","str","split","charAt","toUpperCase","slice","join","Fragment","Col","xs","window","innerWidth","md","lg","sm","Row","active","recovered","deaths","id","viewBox","preserveAspectRatio","ref","DashBoard","setTotal","totalDeath","setTotalDeath","totalRecovered","setTotalRecovered","fetched","setFetched","setLastUpdated","setTimeseries","deltas","setDeltas","getStates","axios","response","cases_time_series","totalconfirmed","totalrecovered","totaldeceased","statewise","shift","lastupdatedtime","key_values","catch","err","Container","isNaN","confirmeddelta","recovereddelta","deceaseddelta","App","fluid","class","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.acc65864.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./neomarphismstyle.css\";\r\n\r\nexport const Neomarphismui = props => {\r\n  return (\r\n    <section>\r\n      <h2>{props.title}</h2>\r\n      <div className={props.color}>\r\n        <span className={props.size ? props.size : \"\"}>\r\n          <strong>{props.data}</strong>\r\n        </span>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  Bar,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nexport default class RenderLineChart extends PureComponent {\r\n  render() {\r\n    console.log(\"timeseries \", this.props.timeseries, this.props.total);\r\n    return (\r\n      <div style={{ width: \"100%\", height: 400 }}>\r\n        <ResponsiveContainer>\r\n          <ComposedChart\r\n            width={500}\r\n            height={400}\r\n            data={this.props.timeseries}\r\n            margin={{\r\n              top: 20,\r\n              right: 20,\r\n              bottom: 20,\r\n              left: 20\r\n            }}\r\n          >\r\n            <CartesianGrid stroke=\"#f5f5f5\" />\r\n            <XAxis tick={{ fontSize: \"14px\" }} dataKey=\"date\" />\r\n            <YAxis\r\n              tick={{ fontSize: \"14px\" }}\r\n              domain={[\"auto\", parseInt(this.props.total)]}\r\n            />\r\n            <Tooltip\r\n              contentStyle={{ fontSize: \"14px\" }}\r\n              formatter={(value, name, props) =>\r\n                value + \", date: \" + props.payload.date\r\n              }\r\n            />\r\n            <Legend wrapperStyle={{ fontSize: \"14px\" }} />\r\n            <Bar dataKey=\"dailyconfirmed\" barSize={20} fill=\"#82ca9d\" />\r\n            <Line type=\"monotone\" dataKey=\"totalconfirmed\" stroke=\"#ff7300\" />\r\n          </ComposedChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  BarChart,\r\n  ResponsiveContainer,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nclass CustomizedLabel extends PureComponent {\r\n  render() {\r\n    const { x, y, stroke, value } = this.props;\r\n\r\n    return (\r\n      <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor=\"middle\">\r\n        {value}\r\n      </text>\r\n    );\r\n  }\r\n}\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n  render() {\r\n    const { x, y, stroke, payload } = this.props;\r\n\r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text\r\n          x={0}\r\n          y={0}\r\n          dy={3}\r\n          textAnchor=\"end\"\r\n          fill=\"#666\"\r\n          transform=\"rotate(-90)\"\r\n          fontSize=\"12px\"\r\n        >\r\n          {payload.value}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\nexport default class BarChartGraph extends PureComponent {\r\n  render() {\r\n    console.log(this.props.states);\r\n    return (\r\n      <div style={{ width: \"100%\", height: 400 }}>\r\n        <ResponsiveContainer>\r\n          <BarChart\r\n            width={500}\r\n            height={300}\r\n            data={this.props.states}\r\n            margin={{\r\n              top: 20,\r\n              right: 30,\r\n              left: 20,\r\n              bottom: 80\r\n            }}\r\n          >\r\n            {/* <CartesianGrid strokeDasharray=\"1 1\" /> */}\r\n            <XAxis interval={0} dataKey=\"state\" tick={<CustomizedAxisTick />} />\r\n            <YAxis tick={\"\"} />\r\n            <Tooltip\r\n              contentStyle={{ fontSize: \"14px\" }}\r\n              formatter={(value, name, props) =>\r\n                value + \", state: \" + props.payload.state\r\n              }\r\n            />\r\n            <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n            <Bar dataKey=\"confirmed\" stackId=\"a\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"active\" stackId=\"a\" fill=\"#82ca9d\" />\r\n            <Bar dataKey=\"deaths\" stackId=\"a\" fill=\"red\" />\r\n            <Bar dataKey=\"recovered\" stackId=\"a\" fill=\"green\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { legendColor } from \"d3-svg-legend\";\r\nimport * as topojson from \"topojson\";\r\nimport { Neomarphismui } from \"../../Neomorphism\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport indiaMapJson from \"./india.json\";\r\n\r\nfunction ChoroplethMap(props) {\r\n  const [rendered, setRendered] = useState(false);\r\n  const [states, setStates] = useState(props.states);\r\n  const [state, setState] = useState({});\r\n  const [statistic, setStatistic] = useState({});\r\n  const [index, setIndex] = useState(1);\r\n  const choroplethMap = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.states.length > 1 && choroplethMap.current) {\r\n      mapData(choroplethMap.current);\r\n      setState(states[1]);\r\n    }\r\n  }, [statistic]);\r\n\r\n  useEffect(() => {\r\n    if (states.length > 1) {\r\n      let total = 0;\r\n      let maxConfirmed = parseInt(states[1].confirmed);\r\n      let minConfirmed = parseInt(states[1].confirmed);\r\n      for (let i = 1; i < states.length; i++) {\r\n        total += parseInt(states[i].confirmed);\r\n        if (parseInt(states[i].confirmed) > parseInt(maxConfirmed))\r\n          maxConfirmed = parseInt(states[i].confirmed);\r\n        if (parseInt(states[i].confirmed) < parseInt(minConfirmed))\r\n          minConfirmed = parseInt(states[i].confirmed);\r\n      }\r\n      setStatistic({\r\n        total: total,\r\n        maxConfirmed: maxConfirmed,\r\n        minConfirmed: minConfirmed\r\n      });\r\n    }\r\n  }, [states.length]);\r\n\r\n  useEffect(() => {\r\n    setStates(props.states);\r\n  }, [props.states]);\r\n\r\n  const handleMouseover = name => {\r\n    states.map((state, index) => {\r\n      if (state.state.toLowerCase() === name.toLowerCase()) {\r\n        setState(state);\r\n        setIndex(index);\r\n      }\r\n    });\r\n  };\r\n\r\n  const mapData = selector => {\r\n    const svg = d3.select(selector);\r\n    const width = +svg.attr(\"width\");\r\n    const height = +svg.attr(\"height\");\r\n\r\n    const unemployment = d3.map();\r\n\r\n    const projection = d3\r\n      .geoMercator()\r\n      .center([78.9, 19])\r\n      .scale(1000)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const path = d3.geoPath(projection);\r\n\r\n    // Colorbar\r\n    const maxInterpolation = 0.8;\r\n\r\n    function label({ i, genLength, generatedLabels, labelDelimiter }) {\r\n      if (i === genLength - 1) {\r\n        const n = Math.floor(generatedLabels[i]);\r\n        return `${n}+`;\r\n      } else {\r\n        const n1 = Math.floor(generatedLabels[i]);\r\n        const n2 = Math.floor(generatedLabels[i + 1]);\r\n        return `${n1} - ${n2}`;\r\n      }\r\n    }\r\n\r\n    const color = d3\r\n      .scaleSequential(d3.interpolateReds)\r\n      .domain([0, statistic.maxConfirmed / maxInterpolation]);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legendLinear\")\r\n      .attr(\"transform\", \"translate(373, 278)\");\r\n\r\n    const numCells = 6;\r\n    const delta = Math.floor(statistic.maxConfirmed / (numCells - 1));\r\n    const cells = Array.from(Array(numCells).keys()).map(i => i * delta);\r\n\r\n    const legendLinear = legendColor()\r\n      .shapeWidth(50)\r\n      .cells(cells)\r\n      .titleWidth(3)\r\n      .labels(label)\r\n      .title(\"Confirmed Cases\")\r\n      .orient(\"vertical\")\r\n      .scale(color);\r\n\r\n    svg.select(\".legendLinear\").call(legendLinear);\r\n\r\n    const promises = [JSON.parse(JSON.stringify(indiaMapJson))];\r\n\r\n    Promise.all(promises).then(ready);\r\n\r\n    function ready([india]) {\r\n      states.map((state, index) => {\r\n        unemployment.set(state.state.toLowerCase(), state.confirmed);\r\n      });\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"class\", \"states\")\r\n        .selectAll(\"path\")\r\n        .data(topojson.feature(india, india.objects.india).features)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"fill\", function(d) {\r\n          const n = unemployment.get(d.properties.ST_NM.toLowerCase());\r\n          return d3.interpolateReds(\r\n            (d.confirmed =\r\n              (n > 0) * 0.05 + (n / statistic.maxConfirmed) * maxInterpolation)\r\n          );\r\n        })\r\n        .attr(\"d\", path)\r\n        .attr(\"pointer-events\", \"all\")\r\n        .on(\"mouseenter\", d => {\r\n          handleMouseover(d.properties.ST_NM);\r\n          const target = d3.event.target;\r\n          d3.select(target.parentNode.appendChild(target))\r\n            .attr(\"stroke\", \"#ff073a\")\r\n            .attr(\"stroke-width\", 2);\r\n        })\r\n        .on(\"mouseleave\", d => {\r\n          const n = unemployment.get(d.properties.ST_NM.toLowerCase());\r\n          const target = d3.event.target;\r\n          d3.select(target)\r\n            .attr(\r\n              \"fill\",\r\n              d3.interpolateReds(\r\n                (d.confirmed =\r\n                  (n > 0) * 0.05 +\r\n                  (n / statistic.maxConfirmed) * maxInterpolation)\r\n              )\r\n            )\r\n            .attr(\"stroke\", \"None\");\r\n        })\r\n        .style(\"cursor\", \"pointer\")\r\n        .append(\"title\")\r\n        .text(function(d) {\r\n          return (\r\n            parseFloat(\r\n              100 *\r\n                (unemployment.get(d.properties.ST_NM.toLowerCase()) /\r\n                  statistic.total)\r\n            ).toFixed(2) +\r\n            \"% from \" +\r\n            toTitleCase(d.properties.ST_NM)\r\n          );\r\n        });\r\n\r\n      svg\r\n        .append(\"path\")\r\n        .attr(\"stroke\", \"#ff073a20\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"d\", path(topojson.mesh(india, india.objects.india)));\r\n    }\r\n  };\r\n\r\n  const toTitleCase = str => {\r\n    str = str.toLowerCase().split(\" \");\r\n    for (let i = 0; i < str.length; i++) {\r\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n    }\r\n    return str.join(\" \");\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Col xs={12} className=\"text-center\">\r\n        <h1 className=\"header\">Statistics by State</h1>\r\n      </Col>\r\n      <Col xs={12} className=\"text-center\">\r\n        <h6 className=\"header\">\r\n          {window.innerWidth <= 769 ? \"Tap\" : \"Hover\"} over a state for more\r\n          details\r\n        </h6>\r\n      </Col>\r\n      <Col xs={12} md={6} lg={6} sm={12}>\r\n        <Row>\r\n          <Col>\r\n            <Neomarphismui\r\n              title=\"State\"\r\n              color=\"neumorphic variation2 blue\"\r\n              data={state.state}\r\n              size=\"small\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Neomarphismui\r\n              title=\"Confirmed\"\r\n              color=\"neumorphic variation2 brown\"\r\n              data={state.confirmed}\r\n            />\r\n          </Col>\r\n\r\n          <Col>\r\n            <Neomarphismui\r\n              title=\"Active\"\r\n              color=\"neumorphic variation2 orange\"\r\n              data={state.active}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Neomarphismui\r\n              title=\"Recovered\"\r\n              color=\"neumorphic variation2 green\"\r\n              data={state.recovered}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Neomarphismui\r\n              title=\"Deceased\"\r\n              color=\"neumorphic variation2 red\"\r\n              data={state.deaths}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      <Col xs={12} md={6} lg={6} sm={12}>\r\n        <svg\r\n          id=\"chart\"\r\n          width={`556`}\r\n          height={`400`}\r\n          viewBox={`450 -200 275 739`}\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n          ref={choroplethMap}\r\n        ></svg>\r\n      </Col>\r\n    </React.Fragment>\r\n    // <div\r\n    //   className=\"ChoroplethMap fadeInUp\"\r\n    //   style={{\r\n    //     animationDelay: \"1.2s\",\r\n    //     position: \"relative\"\r\n    //   }}\r\n    // >\r\n    //   <h1 className=\"header\">Statistics by State</h1>\r\n    //   <h6 className=\"header\">\r\n    //     {window.innerWidth <= 769 ? \"Tap\" : \"Hover\"} over a state for more\r\n    //     details\r\n    //   </h6>\r\n    //   <div className=\"svg-parent\" style={{ textAlign: \"end\" }}>\r\n    //     <svg\r\n    //       id=\"chart\"\r\n    //       width=\"650\"\r\n    //       height={window.innerWidth <= 479 ? 650 : 750}\r\n    //       viewBox={`0 0 650 ${window.innerWidth <= 479 ? 650 : 750}`}\r\n    //       preserveAspectRatio=\"xMidYMid meet\"\r\n    //       ref={choroplethMap}\r\n    //     ></svg>\r\n    //   </div>\r\n\r\n    //   <div\r\n    //     className=\"map-stats\"\r\n    //     style={{\r\n    //       display: \"grid\",\r\n    //       gridTemplateColumns: \"repeat(auto-fit, minmax(165px, 1fr))\",\r\n    //       width: \"40%\",\r\n    //       position: \"absolute\",\r\n    //       top: \"8rem\",\r\n    //       left: \"1px\"\r\n    //     }}\r\n    //   >\r\n    //     <Neomarphismui\r\n    //       title=\"State\"\r\n    //       color=\"neumorphic variation2 blue\"\r\n    //       data={state.state}\r\n    //       size=\"small\"\r\n    //     />\r\n\r\n    //     <Neomarphismui\r\n    //       title=\"Confirmed\"\r\n    //       color=\"neumorphic variation2 brown\"\r\n    //       data={state.confirmed}\r\n    //     />\r\n    //     <Neomarphismui\r\n    //       title=\"Active\"\r\n    //       color=\"neumorphic variation2 orange\"\r\n    //       data={state.active}\r\n    //     />\r\n    //     <Neomarphismui\r\n    //       title=\"Recovered\"\r\n    //       color=\"neumorphic variation2 green\"\r\n    //       data={state.recovered}\r\n    //     />\r\n    //     <Neomarphismui\r\n    //       title=\"Deceased\"\r\n    //       color=\"neumorphic variation2 red\"\r\n    //       data={state.deaths}\r\n    //     />\r\n    //   </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default ChoroplethMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport style from \"./style.css\";\r\nimport axios from \"axios\";\r\nimport RenderLineChart from \"../charts/linechart\";\r\nimport BarChartGraph from \"../charts/barchart\";\r\nimport { Neomarphismui } from \"../Neomorphism\";\r\nimport Map from \"../charts/map\";\r\nimport ChoroplethMap from \"../charts/map/choropleth\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst DashBoard = props => {\r\n  const [states, setStates] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [totalDeath, setTotalDeath] = useState(0);\r\n  const [totalRecovered, setTotalRecovered] = useState(0);\r\n  const [fetched, setFetched] = useState(false);\r\n  const [lastUpdated, setLastUpdated] = useState(\"\");\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const [deltas, setDeltas] = useState([]);\r\n  useEffect(() => {\r\n    if (fetched === false) {\r\n      getStates();\r\n    }\r\n  }, [fetched]);\r\n  const getStates = () => {\r\n    axios\r\n      .get(\"https://api.covid19india.org/data.json\")\r\n      .then(response => {\r\n        setTotal(\r\n          response.data.cases_time_series[\r\n            response.data.cases_time_series.length - 2\r\n          ].totalconfirmed\r\n        );\r\n        setTotalRecovered(\r\n          response.data.cases_time_series[\r\n            response.data.cases_time_series.length - 2\r\n          ].totalrecovered\r\n        );\r\n        setTotalDeath(\r\n          response.data.cases_time_series[\r\n            response.data.cases_time_series.length - 2\r\n          ].totaldeceased\r\n        );\r\n        response.data.statewise.shift();\r\n        setStates(response.data.statewise);\r\n        response.data.cases_time_series.length =\r\n          response.data.cases_time_series.length - 1;\r\n        setTimeseries(response.data.cases_time_series);\r\n        setLastUpdated(\r\n          response.data.statewise[0].lastupdatedtime.slice(0, 15) +\r\n            response.data.statewise[0].lastupdatedtime.slice(18)\r\n        );\r\n        setDeltas(response.data.key_values[0]);\r\n        setFetched(true);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs={6} sm={6} md={3} lg={3}>\r\n          <Neomarphismui\r\n            title=\"Confirmed\"\r\n            color=\"neumorphic variation2 brown\"\r\n            data={\r\n              isNaN(parseInt(total) + parseInt(deltas.confirmeddelta))\r\n                ? 0\r\n                : parseInt(total) + parseInt(deltas.confirmeddelta)\r\n            }\r\n          />\r\n        </Col>\r\n        <Col xs={6} sm={6} md={3} lg={3}>\r\n          <Neomarphismui\r\n            title=\"Active\"\r\n            color=\"neumorphic variation2 orange\"\r\n            data={\r\n              isNaN(\r\n                parseInt(total) +\r\n                  parseInt(deltas.confirmeddelta) -\r\n                  (parseInt(totalRecovered) + parseInt(deltas.recovereddelta)) -\r\n                  (parseInt(totalDeath) + parseInt(deltas.deceaseddelta))\r\n              )\r\n                ? 0\r\n                : parseInt(total) +\r\n                  parseInt(deltas.confirmeddelta) -\r\n                  (parseInt(totalRecovered) + parseInt(deltas.recovereddelta)) -\r\n                  (parseInt(totalDeath) + parseInt(deltas.deceaseddelta))\r\n            }\r\n          />\r\n        </Col>\r\n        <Col xs={6} sm={6} md={3} lg={3}>\r\n          <Neomarphismui\r\n            title=\"Recovered\"\r\n            color=\"neumorphic variation2 green\"\r\n            data={\r\n              isNaN(parseInt(totalRecovered) + parseInt(deltas.recovereddelta))\r\n                ? 0\r\n                : parseInt(totalRecovered) + parseInt(deltas.recovereddelta)\r\n            }\r\n          />\r\n        </Col>\r\n        <Col xs={6} sm={6} md={3} lg={3}>\r\n          <Neomarphismui\r\n            title=\"Death\"\r\n            color=\"neumorphic variation2 red\"\r\n            data={\r\n              isNaN(parseInt(totalDeath) + parseInt(deltas.deceaseddelta))\r\n                ? 0\r\n                : parseInt(totalDeath) + parseInt(deltas.deceaseddelta)\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs={12} sm={12} md={6} lg={6}>\r\n          {timeseries.length > 0 ? (\r\n            <div className=\"card\">\r\n              <RenderLineChart timeseries={timeseries} total={total} />\r\n            </div>\r\n          ) : (\r\n            \"Loading...\"\r\n          )}\r\n        </Col>\r\n        <Col xs={12} sm={12} md={6} lg={6}>\r\n          {states.length > 0 ? (\r\n            <div className=\"card\">\r\n              <BarChartGraph states={states} />\r\n            </div>\r\n          ) : (\r\n            \"Loading...\"\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <ChoroplethMap states={states} />\r\n      </Row>\r\n      {/* <div className=\"cards\">\r\n        {timeseries.length > 0 ? (\r\n          <div className=\"card\">\r\n            <RenderLineChart timeseries={timeseries} total={total} />\r\n          </div>\r\n        ) : (\r\n          \"Loading...\"\r\n        )}\r\n        {states.length > 0 ? (\r\n          <div className=\"card\">\r\n            <BarChartGraph states={states} />\r\n          </div>\r\n        ) : (\r\n          \"Loading...\"\r\n        )}\r\n      </div>\r\n      <div className=\"map\">\r\n        <ChoroplethMap states={states} />\r\n      </div> */}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DashBoard;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Neomarphismui } from \"./components/Neomorphism\";\nimport DashBoard from \"./components/dashboard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nfunction App() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <DashBoard />\n        </Col>\n      </Row>\n      <div class=\"footer\">\n        <p>Developed by Irfan G G</p>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}